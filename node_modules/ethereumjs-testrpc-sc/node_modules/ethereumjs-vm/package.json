{
  "_args": [
    [
      {
        "raw": "ethereumjs-vm@git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
        "scope": null,
        "escapedName": "ethereumjs-vm",
        "name": "ethereumjs-vm",
        "rawSpec": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
        "spec": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:sc-forks/ethereumjs-vm-sc.git",
          "sshUrl": "git+ssh://git@github.com/sc-forks/ethereumjs-vm-sc.git",
          "httpsUrl": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
          "gitUrl": "git://github.com/sc-forks/ethereumjs-vm-sc.git",
          "shortcut": "github:sc-forks/ethereumjs-vm-sc",
          "directUrl": "https://raw.githubusercontent.com/sc-forks/ethereumjs-vm-sc/master/package.json"
        }
      },
      "/Users/toshendra/Desktop/truffle-test/node_modules/ethereumjs-testrpc-sc"
    ]
  ],
  "_from": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
  "_id": "ethereumjs-vm@2.0.2",
  "_inCache": true,
  "_location": "/ethereumjs-testrpc-sc/ethereumjs-vm",
  "_phantomChildren": {
    "bn.js": "4.11.7",
    "create-hash": "1.1.3",
    "keccakjs": "0.2.1",
    "lodash": "4.17.4",
    "rlp": "2.0.0",
    "secp256k1": "3.3.0"
  },
  "_requested": {
    "raw": "ethereumjs-vm@git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
    "scope": null,
    "escapedName": "ethereumjs-vm",
    "name": "ethereumjs-vm",
    "rawSpec": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
    "spec": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:sc-forks/ethereumjs-vm-sc.git",
      "sshUrl": "git+ssh://git@github.com/sc-forks/ethereumjs-vm-sc.git",
      "httpsUrl": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
      "gitUrl": "git://github.com/sc-forks/ethereumjs-vm-sc.git",
      "shortcut": "github:sc-forks/ethereumjs-vm-sc",
      "directUrl": "https://raw.githubusercontent.com/sc-forks/ethereumjs-vm-sc/master/package.json"
    }
  },
  "_requiredBy": [
    "/ethereumjs-testrpc-sc"
  ],
  "_resolved": "git+https://github.com/sc-forks/ethereumjs-vm-sc.git#328771cace30ed16ad5c1d13a69cda13d31173f9",
  "_shasum": "0f69b4c495dc08e1b1ab1b88a90f7ee717556cdd",
  "_shrinkwrap": null,
  "_spec": "ethereumjs-vm@git+https://github.com/sc-forks/ethereumjs-vm-sc.git",
  "_where": "/Users/toshendra/Desktop/truffle-test/node_modules/ethereumjs-testrpc-sc",
  "author": {
    "name": "mjbecze",
    "email": "mjbecze@gmail.com"
  },
  "browserify": {
    "transform": [
      [
        "babelify",
        {
          "presets": [
            "es2015"
          ]
        }
      ]
    ]
  },
  "bugs": {
    "url": "https://github.com/ethereumjs/ethereumjs-vm/issues"
  },
  "contributors": [
    {
      "name": "Alex Beregszaszi",
      "email": "alex@rtfs.hu"
    }
  ],
  "dependencies": {
    "async": "^2.1.2",
    "async-eventemitter": "^0.2.2",
    "ethereum-common": "0.0.18",
    "ethereumjs-account": "^2.0.3",
    "ethereumjs-block": "^1.2.2",
    "ethereumjs-util": "^4.0.1",
    "fake-merkle-patricia-tree": "^1.0.1",
    "functional-red-black-tree": "^1.0.1",
    "merkle-patricia-tree": "^2.1.2"
  },
  "description": "an ethereum VM implementation",
  "devDependencies": {
    "babel-preset-es2015": "^6.24.0",
    "babelify": "^7.3.0",
    "ethereumjs-blockchain": "^1.4.1",
    "ethereumjs-testing": "0.0.1",
    "ethereumjs-tx": "1.1.0",
    "level": "^1.4.0",
    "leveldown": "^1.4.6",
    "levelup": "^1.3.2",
    "memdown": "^1.1.0",
    "minimist": "^1.1.1",
    "standard": "^5.2.2",
    "tape": "^4.2.0"
  },
  "gitHead": "328771cace30ed16ad5c1d13a69cda13d31173f9",
  "homepage": "https://github.com/ethereumjs/ethereumjs-vm",
  "keywords": [
    "ethereum",
    "VM"
  ],
  "license": "MPL-2.0",
  "main": "index.js",
  "name": "ethereumjs-vm",
  "optionalDependencies": {},
  "readme": "# SYNOPSIS \n\n[![NPM Package](https://img.shields.io/npm/v/ethereumjs-vm.svg?style=flat-square)](https://www.npmjs.org/package/ethereumjs-vm)\n[![Build Status](https://img.shields.io/travis/ethereumjs/ethereumjs-vm.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereumjs/ethereumjs-vm)\n[![Gitter](https://img.shields.io/gitter/room/ethereum/ethereumjs-lib.svg?style=flat-square)](https://gitter.im/ethereum/ethereumjs-lib) or #ethereumjs on freenode  \n\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard) \n\nImplements Ethereum's VM in JS\n\n# INSTALL\n`npm install ethereumjs-vm`\n\n# USAGE\n```javascript\nvar VM = require('ethereumjs-vm')\n\n//create a new VM instance\nvar vm = new VM()\nvar code = '7f4e616d65526567000000000000000000000000000000000000000000000000003055307f4e616d6552656700000000000000000000000000000000000000000000000000557f436f6e666967000000000000000000000000000000000000000000000000000073661005d2720d855f1d9976f88bb10c1a3398c77f5573661005d2720d855f1d9976f88bb10c1a3398c77f7f436f6e6669670000000000000000000000000000000000000000000000000000553360455560df806100c56000396000f3007f726567697374657200000000000000000000000000000000000000000000000060003514156053576020355415603257005b335415603e5760003354555b6020353360006000a233602035556020353355005b60007f756e72656769737465720000000000000000000000000000000000000000000060003514156082575033545b1560995733335460006000a2600033545560003355005b60007f6b696c6c00000000000000000000000000000000000000000000000000000000600035141560cb575060455433145b1560d25733ff5b6000355460005260206000f3'\n//code needs to be a buffer\ncode = new Buffer(code, 'hex')\n\nvm.runCode({\n  code: code,\n  gasLimit: new Buffer('ffffffff', 'hex') \n}, function(err, results){\n  console.log('returned: ' + results.return.toString('hex'));\n})\n```\nAlso more examples can be found here  \n- [examples](./examples)\n- [old blog post](https://wanderer.github.io/ethereum/nodejs/code/2014/08/12/running-contracts-with-vm/)\n\n# BROWSER  \nTo build for standalone use in the browser install `browserify` and run `npm run build`. This will give you a global variable `EthVM` to use. The standalone file will be at `./dist/ethereumjs-vm.js`\n\n# API\n  - [`new VM([opts])`](#new-vmstatetrie-blockchain)  \n  - [`VM` methods](#vm-methods)  \n    - [`vm.runBlockchain([blockchain], [cb])`](#vmrunblockchainblockchain-cb)\n    - [`vm.runBlock(opts, cb)`](#vmrunblockopts-cb)\n    - [`vm.runTx(opts, cb)`](#vmruntxopts-cb)\n    - [`vm.runCode(opts, cb)`](#vmruncodeopts-cb)\n    - [`vm.generateCanonicalGenesis(cb)`](#vmgeneratecanonicalgenesiscb)\n    - [`vm.generateGenesis(cb)`](#vmgenerategenesiscb)\n  - [`VM` debugging hooks](#vm-debugging-hooks)\n    - [`vm.onStep`](#vmonstep)\n\n### `new VM([StateTrie], [blockchain])`\nCreates a new VM object\n- `StateTrie` - The [Patricia Merkle Tree](https://github.com/wanderer/merkle-patricia-tree) that contains the state. If no trie is given the `VM` will create an in memory trie.\n- `blockchain` - an instance of the [`Blockchain`](https://github.com/ethereum/ethereumjs-lib/blob/master/docs/blockchain.md) If no blockchain is given a fake blockchain will be used.\n- `opts`\n  - `state` - the state trie\n  - `blockchain` - an instance of ethereumjs-blockchain\n  - `enableHomestead` - a boolean that overrides the homestead settings based on blocknumber\n  - `activatePrecompiles` - create entries in the state tree for the precompiled contracts\n\n### `VM` methods\n\n\n#### `vm.runBlockchain(blockchain, cb)`\nProcess a transaction.\n- `blockchain` - A [blockchain](https://github.com/ethereum/ethereumjs-blockchain) that to process\n- `cb` - The callback. It is given an err parameter if it fails\n\n--------------------------------------------------------\n\n#### `vm.runBlock(opts, cb)`\nProcesses the `block` running all of the transactions it contains and updating the miner's account.\n- `opts.block` - The [`Block`](./block.md) to process\n- `opts.generate` - a `Boolean`; whether to generate the stateRoot. If false  `runBlock` will check the stateRoot of the block against the Trie\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null`, and a `results` object with the following properties:\n  - `receipts` - the receipts from the transactions in the block\n  - `results` - an Array for results from the transactions in the block\n--------------------------------------------------------\n\n\n#### `vm.runTx(opts, cb)`\nProcess a transaction.\n- `opts.tx` - A [`Transaction`](https://github.com/ethereum/ethereumjs-tx) to run.\n- `opts.block` - The block to which the `tx` belongs. If omitted a blank block will be used.\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null`, and a `results` object with the following properties:\n  - `amountSpent` - the amount of ether used by this transaction as a `bignum`\n  - `gasUsed` - the amount of gas used by the transaction\n  - `vm` - contains the results from running the code, if any, as described in [`vm.runCode(params, cb)`](#vmruncodeopts-cb)\n\n--------------------------------------------------------\n\n#### `vm.runCode(opts, cb)`\nRuns EVM code\n- `opts.code` - The EVM code to run given as a `Buffer`\n- `opts.data` - The input data given as a `Buffer`\n- `opts.value` - The value in ether that is being sent to `opt.address`. Defaults to `0`\n- `opts.block` - The [`Block`](./block.md) the `tx` belongs to. If omitted a blank block will be used.\n- `opts.gasLimit` - The gas limit for the code given as a `Buffer`\n- `opts.account` - The [`Account`](./account.md) that the executing code belongs to. If omitted an empty account will be used\n- `opts.address` - The address of the account that is executing this code. The address should be a `Buffer` of bytes. Defaults to `0`\n- `opts.origin` - The address where the call originated from. The address should be a `Buffer` of 20bits. Defaults to `0`\n- `opts.caller` - The address that ran this code. The address should be a `Buffer` of 20bits. Defaults to `0`\n- `cb` - The callback. It is given two arguments, an `error` string containing an error that may have happened or `null` and a `results` object with the following properties\n  - `gas` - the amount of gas left as a `bignum`\n  - `gasUsed` - the amount of gas as a `bignum` the code used to run. \n  - `gasRefund` - a `Bignum` containing the amount of gas to refund from deleting storage values\n  - `suicides` - an `Array` of accounts that have suicided.\n  - `suicideTo` - the account that the suicide refund should go to.\n  - `logs` - an `Array` of logs that the contract emitted.\n  - `exception` - `0` if the contract encountered an exception, `1` otherwise.\n  - `exceptionError` - a `String` describing the exception if there was one.\n  - `return` - a `Buffer` containing the value that was returned by the contract\n\n\n--------------------------------------------------------\n\n#### `vm.stateManager.generateCanonicalGenesis(cb)`\nGenerates the Canonical genesis state.\n\n--------------------------------------------------------\n\n#### `vm.stateManager.generateGenesis(genesisData, cb)`\nGenerate the genesis state.\n- `genesisData` - an `Object` whose keys are addresses and values are `string`s representing initial allocation of ether.\n- `cb` - The callback\n\n```javascript\nvar genesisData = {\n  \"51ba59315b3a95761d0863b05ccc7a7f54703d99\": \"1606938044258990275541962092341162602522202993782792835301376\",\n  \"e4157b34ea9615cfbde6b4fda419828124b70c78\": \"1606938044258990275541962092341162602522202993782792835301376\"\n}\n\nvm.generateGenesis(genesisData, function(){\n  console.log('generation done');\n})\n```\n\n### `events`\nAll events are instances of [async-eventemmiter](https://www.npmjs.com/package/async-eventemitter). If an event handler has an arity of 2 the VM will pause until the callback is called\n\n#### `step` \nThe `step` event is given an `Object` and callback. The `Object` has the following properties.\n- `pc` - a `Number` representing the program counter\n- `opcode` - the next opcode to be ran\n- `gas` - a `bignum` standing for the amount of gasLeft\n- `stack` - an `Array` of `Buffers` containing the stack. \n- `storageTrie` - the storage [trie](https://github.com/wanderer/merkle-patricia-tree) for the account\n- `account` - the [`Account`](https://github.com/ethereum/ethereumjs-account) which owns the code running.\n- `address` - the address of the `account`\n- `depth` - the current number of calls deep the contract is\n- `memory` - the memory of the VM as a `buffer`\n- `cache` - The account cache. Contains all the accounts loaded from the trie. It is an instance of [functional red black tree](https://www.npmjs.com/package/functional-red-black-tree) \n\n#### `beforeBlock`\nEmits the block that is about to be processed.\n\n#### `afterBlock`\nEmits the results of the processing a block.\n\n#### `beforeTx`\nEmits the Transaction that I about to be processed.\n\n#### `afterTx`\nEmits the result of the transaction.\n\n# TESTING\n`npm test`  \nif you want to just run the Blockchain tests run\n`./test/tester -b`\nif you want to just run the VM tests run\n`./test/tester -v`\nif you want to just run the State tests run\n`./test/tester -s`\n\n# Internal Structure\nThe VM processes state changes at many levels.\n\n* runBlockchain\n  * for every block, runBlock\n* runBlock\n  * for every tx, runTx\n  * pay miner and uncles\n* runTx\n  * check sender balance\n  * check sender nonce\n  * runCall\n  * transfer gas charges\n* runCall\n  * checkpoint state\n  * transfer value\n  * load code\n  * runCode\n  * materialize created contracts\n  * revert or commit checkpoint\n* runCode\n  * iterate over code\n  * run op codes\n  * track gas usage\n* OpFns\n  * run individual op code\n  * modify stack\n  * modify memory\n  * calculate fee\n\nThe opFns for `CREATE`, `CALL`, and `CALLCODE` call back up to `runCall`.\n\n\n# LICENSE\n[MPL-2.0](https://www.mozilla.org/MPL/2.0/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereumjs/ethereumjs-vm.git"
  },
  "scripts": {
    "lint": "standard",
    "test": "./tests/tester -a",
    "testBlockchain": "./tests/tester -b",
    "testState": "./tests/tester -s",
    "testVM": "./tests/tester -v"
  },
  "standard": {
    "ignore": [
      "dist/**",
      "examples/runcode-browserify.js"
    ]
  },
  "version": "2.0.2"
}
